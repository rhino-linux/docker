name: Publish Rhino Docker Images

on:
  workflow_dispatch:
    inputs:
      vertag:
        description: 'Version Tag'
        required: false

env:
  INPUT_VERTAG: ${{ github.event.inputs.vertag }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/test

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
          - runner: buildjet-4vcpu-ubuntu-2204-arm
            platform: linux/arm64
    permissions:
      contents: read
      packages: write

    steps:
      - name: Prepare
        run: |
          echo "PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
          echo "PLATFORM_PAIR=${{ matrix.platform //\//- }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Build Dockerfile
        run: |
          vertag="${{ env.INPUT_VERTAG }}"
          ./rhino-docker-builder -f -a off -v ${vertag}
          echo "BUILT_DOCKFILE=$(ls Dockerfile.RhinoLinux*)"  >> $GITHUB_ENV
          if [[ -z ${vertag} ]]; then
            echo "DOCK_LABEL=$(date +%Y%m%d)"  >> $GITHUB_ENV
          else
            echo "DOCK_LABEL=${{ env.INPUT_VERTAG }}"  >> $GITHUB_ENV
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.INPUT_VERTAG }}-${{ matrix.platform }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ env.BUILT_DOCKFILE }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo $digest > "/tmp/digests/digest-${{ env.PLATFORM_PAIR }}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          digests=$(cat digest-*)
          docker buildx imagetools create ${{ steps.meta.outputs.tags }} ${{ steps.meta.outputs.labels }} $digests

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
